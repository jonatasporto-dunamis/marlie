# =============================================================================
# CONFIGURAÇÃO DO MÓDULO MARLIE-CATALOG
# =============================================================================
# Sincronização e normalização do catálogo Trinks para base local
# Version: 1.0
# Language: pt-BR

module:
  name: "marlie-catalog"
  version: "1.0"
  language: "pt-BR"
  description: >
    Sincroniza catálogo Trinks → base local (servicos_prof), normaliza nomes, garante
    idempotência e fornece desambiguação orientada por popularidade para UX de seleção
    com respostas numéricas curtas (1–3) e persistência no estado.

security:
  auth: "bearer:{{env.CATALOG_ADMIN_TOKEN}}"
  pii_masking: true
  allowed_ips:
    - "127.0.0.1"
    - "::1"
  rate_limiting:
    enabled: true
    requests_per_minute: 60

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE SINCRONIZAÇÃO E NORMALIZAÇÃO
# -----------------------------------------------------------------------------

sync:
  # Agendamento da sincronização
  schedule_cron: "15 */1 * * *"  # a cada 1h, no minuto 15
  snapshot_cron: "0 2 * * *"     # snapshot diário às 2h
  cleanup_cron: "0 3 * * 0"      # limpeza semanal domingo às 3h
  
  # Configurações de inicialização
  backfill_on_boot: true
  scheduler_enabled: true
  
  # Configurações de paginação e performance
  page_size: 100
  max_concurrent_requests: 5
  timeout_ms: 30000
  lock_ttl_seconds: 3600
  
  # Estratégia de idempotência
  idempotency:
    unique_key: ["profissionalid", "servicoid"]
    strategy: "upsert"  # INSERT ... ON CONFLICT (profissionalid,servicoid) DO UPDATE
  
  # Configurações de normalização
  normalize:
    enabled: true
    function: "normalize_servico_nome"
    steps:
      - "lowercase"
      - "trim"
      - "remove_accents"
      - "collapse_spaces"
      - "strip_symbols: ['/', '-', '_', '•']"
      - "map_synonyms: {'progressiva':'escova progressiva','luzes':'mechas/luzes','pé e mão':'mão e pé'}"
    
    # Mapeamento de sinônimos
    synonyms:
      progressiva: "escova progressiva"
      luzes: "mechas/luzes"
      "pé e mão": "mão e pé"
      mechas: "mechas/luzes"
      "mão e pé": "manicure e pedicure"
      corte: "corte de cabelo"
      escova: "escova progressiva"
      
    # Símbolos a serem removidos
    strip_symbols:
      - "/"
      - "-"
      - "_"
      - "•"
      - "|"
      - "*"
  
  # Índices do banco de dados
  indices:
    primary: ["profissionalid", "servicoid"]
    extra:
      - "btree(nomeservico_normalizado)"
      - "btree(categoria_normalizada)"
      - "gin(nomeservico_normalizado gin_trgm_ops)"
      - "gin(categoria_normalizada gin_trgm_ops)"

# -----------------------------------------------------------------------------
# FERRAMENTAS DE INTEGRAÇÃO
# -----------------------------------------------------------------------------

tools:
  - name: "trinks.fetch_services_incremental"
    description: "Busca catálogo/serviços e relações por paginação incremental."
    input_schema:
      type: object
      properties:
        updated_since_iso:
          type: string
          description: "Data/hora da última sincronização (ISO 8601)"
        page:
          type: integer
          default: 1
          minimum: 1
        page_size:
          type: integer
          default: 100
          minimum: 1
          maximum: 1000
      required: ["updated_since_iso"]
  
  - name: "db.upsert_servicos_prof"
    description: "Upsert normalizado em servicos_prof (idempotente)."
    input_schema:
      type: object
      properties:
        rows:
          type: array
          items:
            type: object
            properties:
              profissionalid:
                type: integer
              servicoid:
                type: integer
              nomeservico:
                type: string
              categoria:
                type: string
              preco:
                type: number
              duracao:
                type: integer
              updated_at:
                type: string
            required: ["profissionalid", "servicoid", "nomeservico"]
      required: ["rows"]
  
  - name: "db.save_watermark"
    description: "Persiste o maior updated_at processado."
    input_schema:
      type: object
      properties:
        updated_since_iso:
          type: string
          description: "Data/hora inicial da sincronização"
        last_seen_iso:
          type: string
          description: "Maior data/hora processada"
      required: ["updated_since_iso", "last_seen_iso"]
  
  - name: "db.compute_daily_diff_report"
    description: "Compara Trinks vs local e gera diff (fantasmas/duplicatas)."
    input_schema:
      type: object
      properties:
        as_of_date:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
          description: "Data no formato YYYY-MM-DD"
      required: ["as_of_date"]
  
  - name: "db.topn_by_category_30d"
    description: "Top-N serviços mais agendados na categoria nos últimos 30 dias."
    input_schema:
      type: object
      properties:
        categoria_norm:
          type: string
          description: "Nome da categoria normalizada"
        n:
          type: integer
          default: 3
          minimum: 1
          maximum: 10
      required: ["categoria_norm"]
  
  - name: "db.search_like"
    description: "Busca textual por termo normalizado, retornando top-N por popularidade."
    input_schema:
      type: object
      properties:
        term_norm:
          type: string
          description: "Termo de busca normalizado"
        n:
          type: integer
          default: 3
          minimum: 1
          maximum: 50
        similarity_threshold:
          type: number
          default: 0.3
          minimum: 0.0
          maximum: 1.0
      required: ["term_norm"]

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE BUSCA E POPULARIDADE
# -----------------------------------------------------------------------------

search:
  default_top_n: 3
  max_results: 50
  similarity_threshold: 0.3
  popularity_days: 30
  cache:
    enabled: true
    ttl_seconds: 3600
    max_size: 1000

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE RELATÓRIOS
# -----------------------------------------------------------------------------

reports:
  auto_generation: true
  retention:
    snapshots_days: 30
    sync_logs_days: 90
  alerts:
    enabled: true
    discrepancy_threshold_percent: 10
    webhook_url: "{{env.CATALOG_WEBHOOK_ALERTS_URL}}"

# -----------------------------------------------------------------------------
# ROTEAMENTO E WEBHOOKS
# -----------------------------------------------------------------------------

routing:
  webhooks:
    # Webhook para sincronização completa
    trigger_full_sync:
      method: "POST"
      path: "/admin/sync/servicos"
      auth: "bearer:{{env.CATALOG_ADMIN_TOKEN}}"
      body:
        updated_since_iso: string
      effect:
        - paginate:
            tool: "trinks.fetch_services_incremental"
            args:
              updated_since_iso: "{{body.updated_since_iso || env.CATALOG_WATERMARK || '1970-01-01T00:00:00Z'}}"
            on_page:
              - normalize_map:
                  using: "normalize_servico_nome"
                  fields:
                    - "nomeservico -> nomeservico_normalizado"
                    - "categoria -> categoria_normalizada"
              - tool: "db.upsert_servicos_prof"
                args:
                  rows: "{{page.rows}}"
              - set:
                  last_seen_iso: "{{max(page.rows[].updated_at)}}"
            finally:
              - tool: "db.save_watermark"
                args:
                  updated_since_iso: "{{body.updated_since_iso || env.CATALOG_WATERMARK || '1970-01-01T00:00:00Z'}}"
                  last_seen_iso: "{{last_seen_iso || now_iso}}"
        - respond_json:
            ok: true
            watermark: "{{last_seen_iso}}"
            processed_pages: "{{page_count}}"
            total_records: "{{total_records}}"
    
    # Webhook para relatório diário de diferenças
    daily_diff:
      method: "POST"
      path: "/admin/sync/diff"
      auth: "bearer:{{env.CATALOG_ADMIN_TOKEN}}"
      body:
        as_of_date: string
      effect:
        - tool: "db.compute_daily_diff_report"
          args:
            as_of_date: "{{body.as_of_date}}"
          save_as: "diff"
        - respond_json: "{{diff}}"
    
    # Webhook para busca de serviços
    search_services:
      method: "GET"
      path: "/admin/catalog/search"
      auth: "bearer:{{env.CATALOG_ADMIN_TOKEN}}"
      query:
        term: string
        category: string
        limit: integer
      effect:
        - tool: "db.search_like"
          args:
            term_norm: "{{normalize(query.term)}}"
            n: "{{query.limit || 3}}"
          save_as: "results"
        - respond_json:
            query: "{{query.term}}"
            results: "{{results}}"
            total: "{{results.length}}"
    
    # Webhook para top serviços por categoria
    top_by_category:
      method: "GET"
      path: "/admin/catalog/top-category"
      auth: "bearer:{{env.CATALOG_ADMIN_TOKEN}}"
      query:
        category: string
        limit: integer
      effect:
        - tool: "db.topn_by_category_30d"
          args:
            categoria_norm: "{{normalize(query.category)}}"
            n: "{{query.limit || 3}}"
          save_as: "top_services"
        - respond_json:
            category: "{{query.category}}"
            top_services: "{{top_services}}"
            period_days: 30

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE MONITORAMENTO
# -----------------------------------------------------------------------------

monitoring:
  metrics:
    enabled: true
    interval_seconds: 300
    retention_days: 7
  
  health_checks:
    enabled: true
    interval_seconds: 60
    endpoints:
      - name: "database"
        type: "postgresql"
        timeout_ms: 5000
      - name: "redis"
        type: "redis"
        timeout_ms: 3000
      - name: "trinks_api"
        type: "http"
        url: "{{env.TRINKS_CATALOG_API_URL}}/health"
        timeout_ms: 10000
  
  logging:
    level: "{{env.CATALOG_LOG_LEVEL || 'info'}}"
    format: "json"
    include_stack_trace: true
    mask_sensitive_data: true

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE DESENVOLVIMENTO
# -----------------------------------------------------------------------------

development:
  debug_mode: "{{env.CATALOG_DEBUG_MODE || false}}"
  mock_api: "{{env.CATALOG_MOCK_API || false}}"
  mock_data_file: "{{env.CATALOG_MOCK_DATA_FILE || './test/fixtures/catalog-mock-data.json'}}"
  strict_validation: true
  force_reindex: false

# -----------------------------------------------------------------------------
# CONFIGURAÇÕES DE INTEGRAÇÃO
# -----------------------------------------------------------------------------

integrations:
  scheduling:
    enabled: true
    webhook_url: "{{env.SCHEDULING_WEBHOOK_URL}}"
  
  metrics:
    enabled: true
    export_format: "prometheus"
  
  notifications:
    enabled: false
    webhook_url: "{{env.CATALOG_SYNC_WEBHOOK_URL}}"
    events:
      - "sync_completed"
      - "sync_failed"
      - "discrepancy_detected"

# -----------------------------------------------------------------------------
# TEMPLATES DE RESPOSTA
# -----------------------------------------------------------------------------

templates:
  sync_success: |
    ✅ Sincronização concluída com sucesso!
    📊 Processados: {{total_records}} registros
    📄 Páginas: {{page_count}}
    🕒 Watermark: {{watermark}}
  
  sync_error: |
    ❌ Erro na sincronização do catálogo
    🔍 Detalhes: {{error_message}}
    📞 Contate o suporte se o problema persistir
  
  search_results: |
    🔍 Resultados para "{{query}}":
    {{#each results}}
    {{@index}}. {{nomeservico}} ({{categoria}})
    {{/each}}
  
  no_results: |
    😔 Nenhum serviço encontrado para "{{query}}"
    💡 Tente termos mais gerais ou verifique a ortografia

# -----------------------------------------------------------------------------
# VALIDAÇÕES E CONSTRAINTS
# -----------------------------------------------------------------------------

validation:
  required_fields:
    - "profissionalid"
    - "servicoid"
    - "nomeservico"
  
  data_types:
    profissionalid: "integer"
    servicoid: "integer"
    nomeservico: "string"
    categoria: "string"
    preco: "number"
    duracao: "integer"
  
  constraints:
    nomeservico:
      min_length: 2
      max_length: 255
    categoria:
      min_length: 2
      max_length: 100
    preco:
      minimum: 0
      maximum: 99999.99
    duracao:
      minimum: 1
      maximum: 1440  # 24 horas em minutos