/**
 * Script de inicializa√ß√£o da M√°quina de Estados
 * 
 * Este arquivo deve ser importado na inicializa√ß√£o da aplica√ß√£o
 * para configurar e ativar a nova m√°quina de estados.
 */

import { initializeStateMachineIntegration, StateMachineIntegrationConfig } from './core/state-machine-integration';
import { logger } from './utils/logger';
import { getRedis } from './infra/redis';

/**
 * Configura√ß√£o padr√£o da m√°quina de estados
 */
const DEFAULT_CONFIG: StateMachineIntegrationConfig = {
  enableStateMachine: process.env.ENABLE_STATE_MACHINE === 'true',
  fallbackToLegacy: process.env.FALLBACK_TO_LEGACY !== 'false',
  debugMode: process.env.DEBUG_STATE_MACHINE === 'true',
  redisPrefix: process.env.REDIS_PREFIX || 'marlie'
};

/**
 * Inicializa a m√°quina de estados
 */
export async function initializeStateMachine(config?: Partial<StateMachineIntegrationConfig>) {
  try {
    logger.info('üöÄ Initializing State Machine...');
    
    // Merge configura√ß√£o personalizada com padr√£o
    const finalConfig = { ...DEFAULT_CONFIG, ...config };
    
    // Log da configura√ß√£o (sem dados sens√≠veis)
    logger.info('State Machine Configuration:', {
      enableStateMachine: finalConfig.enableStateMachine,
      fallbackToLegacy: finalConfig.fallbackToLegacy,
      debugMode: finalConfig.debugMode,
      redisPrefix: finalConfig.redisPrefix
    });
    
    // Verifica depend√™ncias
    await checkDependencies();
    
    // Inicializa a integra√ß√£o
    const integration = await initializeStateMachineIntegration(finalConfig);
    
    // Configura limpeza autom√°tica
    if (process.env.CLEANUP_INTERVAL) {
      const intervalMinutes = parseInt(process.env.CLEANUP_INTERVAL, 10);
      setInterval(async () => {
        try {
          await integration.cleanup();
          logger.debug('Automatic cleanup completed');
        } catch (error) {
          logger.error('Error during automatic cleanup:', error);
        }
      }, intervalMinutes * 60 * 1000);
      
      logger.info(`üßπ Automatic cleanup scheduled every ${intervalMinutes} minutes`);
    }
    
    // Log de sucesso
    if (finalConfig.enableStateMachine) {
      logger.info('‚úÖ State Machine initialized successfully');
    } else {
      logger.info('‚ö†Ô∏è  State Machine disabled, using legacy router');
    }
    
    return integration;
  } catch (error) {
    logger.error('‚ùå Failed to initialize State Machine:', error);
    
    if (!DEFAULT_CONFIG.fallbackToLegacy) {
      throw error;
    }
    
    logger.warn('üîÑ Falling back to legacy router due to initialization error');
    return null;
  }
}

/**
 * Verifica se todas as depend√™ncias est√£o dispon√≠veis
 */
async function checkDependencies() {
  const checks = [];
  
  // Verifica Redis
  checks.push(checkRedis());
  
  // Verifica vari√°veis de ambiente obrigat√≥rias
  checks.push(checkEnvironmentVariables());
  
  // Verifica arquivos de configura√ß√£o
  checks.push(checkConfigurationFiles());
  
  await Promise.all(checks);
}

/**
 * Verifica conex√£o com Redis
 */
async function checkRedis() {
  try {
    const redis = await getRedis();
    if (!redis) {
      throw new Error('Redis client not available');
    }
    
    const result = await redis.ping();
    
    if (result !== 'PONG') {
      throw new Error('Redis ping failed');
    }
    
    logger.debug('‚úÖ Redis connection verified');
  } catch (error) {
    logger.error('‚ùå Redis connection failed:', error);
    throw new Error('Redis is required for State Machine');
  }
}

/**
 * Verifica vari√°veis de ambiente obrigat√≥rias
 */
async function checkEnvironmentVariables() {
  const required = [
    'REDIS_URL'
  ];
  
  const missing = required.filter(env => !process.env[env]);
  
  if (missing.length > 0) {
    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
  }
  
  logger.debug('‚úÖ Environment variables verified');
}

/**
 * Verifica arquivos de configura√ß√£o
 */
async function checkConfigurationFiles() {
  const fs = require('fs').promises;
  const path = require('path');
  
  const configFile = path.join(__dirname, 'core', 'state-machine-config.yaml');
  
  try {
    await fs.access(configFile);
    logger.debug('‚úÖ Configuration files verified');
  } catch (error) {
    throw new Error(`Configuration file not found: ${configFile}`);
  }
}

/**
 * Graceful shutdown da m√°quina de estados
 */
export async function shutdownStateMachine() {
  try {
    logger.info('üõë Shutting down State Machine...');
    
    // Aqui voc√™ pode adicionar l√≥gica de cleanup espec√≠fica
    // Por exemplo, salvar estados pendentes, fechar conex√µes, etc.
    
    const redis = await getRedis();
    if (redis) {
      await redis.quit();
    }
    
    logger.info('‚úÖ State Machine shutdown completed');
  } catch (error) {
    logger.error('‚ùå Error during State Machine shutdown:', error);
  }
}

/**
 * Middleware para Express que adiciona a m√°quina de estados ao request
 */
export function createStateMachineMiddleware() {
  return (req: any, res: any, next: any) => {
    // A integra√ß√£o j√° est√° dispon√≠vel globalmente via singleton
    // Este middleware pode ser usado para adicionar funcionalidades espec√≠ficas
    next();
  };
}

/**
 * Utilit√°rio para verificar se a m√°quina de estados est√° ativa
 */
export function isStateMachineEnabled(): boolean {
  return process.env.ENABLE_STATE_MACHINE === 'true';
}

/**
 * Utilit√°rio para obter configura√ß√£o atual
 */
export function getStateMachineConfig(): StateMachineIntegrationConfig {
  return {
    enableStateMachine: process.env.ENABLE_STATE_MACHINE === 'true',
    fallbackToLegacy: process.env.FALLBACK_TO_LEGACY !== 'false',
    debugMode: process.env.DEBUG_STATE_MACHINE === 'true',
    redisPrefix: process.env.REDIS_PREFIX || 'marlie'
  };
}

// Configura√ß√£o de handlers para sinais do sistema
if (process.env.NODE_ENV !== 'test') {
  process.on('SIGTERM', async () => {
    logger.info('Received SIGTERM, shutting down gracefully');
    await shutdownStateMachine();
    process.exit(0);
  });
  
  process.on('SIGINT', async () => {
    logger.info('Received SIGINT, shutting down gracefully');
    await shutdownStateMachine();
    process.exit(0);
  });
  
  process.on('uncaughtException', async (error) => {
    logger.error('Uncaught exception:', error);
    await shutdownStateMachine();
    process.exit(1);
  });
  
  process.on('unhandledRejection', async (reason, promise) => {
    logger.error('Unhandled rejection at:', promise, 'reason:', reason);
    await shutdownStateMachine();
    process.exit(1);
  });
}

export default {
  initializeStateMachine,
  shutdownStateMachine,
  createStateMachineMiddleware,
  isStateMachineEnabled,
  getStateMachineConfig
};